h1. Ordered Active Record (RubyOnRails 3)

This gem allows you to have ordered models. It is like the old *acts_as_list*, but very lightweight and with an optimized SQL syntax.

Suppose you want to order a Post model by position. You need to add a position column to the table _posts_ first.

<pre>
  class CreatePost < ActiveRecord::Migration
    def change
      create_table :posts do |t|
        ...
        t.integer :position, :null => false
      end
    end
  end
</pre>

You can make the position column optional: only records with entered positions will be ordered. In rare cases, you can also add extra order columns.

To add ordering to a model, do the following:

<pre>
  class Post < ActiveRecord::Base
    acts_as_ordered :position
  end
</pre>

You can also order within the scope of other columns, which is useful for things like master-detail relations:

<pre>
  class Detail < ActiveRecord::Base
    belongs_to :post
    acts_as_ordered :position, :scope => :post_id
  end
</pre>

This means the order positions are unique within the scope of the field _post_id_.

h1. Examples

Suppose you have these records (for all examples this is the starting point):

<pre>
  id | position
  ---+---------
   1 |        1
   2 |        2
   3 |        3
</pre>

h2. Scenario 1: insert a new record at position 2

The existing records with position ≥ 2 will have their position increased by 1 and the new record (id 4) is inserted:

<pre>
  Post.create(:position => 2)

  id | position
  ---+---------
   1 |        1
   2 |        3
   3 |        4
   4 |        2
</pre>

h2. Scenario 2: delete the record at position 2

The existing records with position ≥ 2 will have their position decreased by 1 and the record (id 2) is deleted:

<pre>
  Post.find(2).destroy

  id | position
  ---+---------
   1 |        1
   3 |        2
</pre>

h2. Scenario 3: move the record down from position 1 to position 2

The existing record with position 2 will have its position decreased by 1 and the record (id 1) is moved down:

<pre>
  Post.find(1).update_attributes(:position => 2)

  id | position
  ---+---------
   1 |        2
   2 |        1
   3 |        3
</pre>

h2. Scenario 4: move the record up from position 3 to position 1

The existing records with 1 ≥ position ≥ 2 will have their position increased by 1 and the record (id 3) is moved up:

<pre>
  Post.find(3).update_attributes(:position => 1)

  id | position
  ---+---------
   1 |        2
   2 |        3
   3 |        1
</pre>

h2. Scenario 5: insert a new record at position 5

This will create a gap in the position and is bad behavior. It is up to the developer, to avoid this situation. The plugin doesn't check the highest existing position (to avoid executing an extra query).

<pre>
  Post.create(:position => 5)

  id | position
  ---+---------
   1 |        1
   2 |        2
   3 |        3
   4 |        5
</pre>

h2. Scenario 6: insert a new record at position nil

This will not affect the other records.

<pre>
  Post.create(:position => nil)

  id | position
  ---+---------
   1 |        1
   2 |        2
   3 |        3
   4 |      nil
</pre>

h1. Copyright

Copyright (c) 2011 Walter Horstman.